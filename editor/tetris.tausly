SIZE 616, 560

INIT _color = 0
INIT _current = 0
INIT _last = 1

DIM(10,20) game_fields
INIT game_x = 40
INIT game_y = 40
INIT game_width = LEN(game_fields)
INIT game_height = LEN(game_fields(0))
INIT block_size = 28
INIT down_speed = 1
INIT down_speed_multiplier = 12
INIT padding = 1
INIT side_tick = 250
INIT side_tick_hold = 50
INIT coyote_down_time = 500

FUNC GetDownSpeed RETURNS down_speed * (FLOOR(score / 20) + 1)

DIM(8,2) fields
DIM(8,4,4) figures

fields(0)(_color) = "#101016"

fields(1)(_color) = "#60F0F0"
figures(1)(0) = 4,5,6,7
figures(1)(1) = 2,6,10,14
figures(1)(2) = 8,9,10,11
figures(1)(3) = 1,5,9,13

fields(2)(_color) = "#6060F0"
figures(2)(0) = 0,4,5,6
figures(2)(1) = 1,2,5,9
figures(2)(2) = 4,5,6,10
figures(2)(3) = 1,5,8,9

fields(3)(_color) = "#F09000"
figures(3)(0) = 2,4,5,6
figures(3)(1) = 1,5,9,10
figures(3)(2) = 4,5,6,8
figures(3)(3) = 0,1,5,9

fields(4)(_color) = "#F0F000"
figures(4)(0) = 1,2,5,6
figures(4)(1) = 1,2,5,6
figures(4)(2) = 1,2,5,6
figures(4)(3) = 1,2,5,6

fields(5)(_color) = "#00F000"
figures(5)(0) = 1,2,4,5
figures(5)(1) = 1,5,6,10
figures(5)(2) = 5,6,8,9
figures(5)(3) = 0,4,5,9

fields(6)(_color) = "#F060F0"
figures(6)(0) = 1,4,5,6
figures(6)(1) = 1,5,6,9
figures(6)(2) = 4,5,6,9
figures(6)(3) = 1,4,5,9

fields(7)(_color) = "#F00000"
figures(7)(0) = 0,1,5,6
figures(7)(1) = 2,5,6,9
figures(7)(2) = 4,5,9,10
figures(7)(3) = 1,4,5,8

INIT field_index
INIT field
INIT tile_i
INIT tile
INIT tile_x
INIT tile_y

INIT index = 1
INIT rotation
INIT x
INIT y

INIT old_index
INIT old_rotation
INIT old_x
INIT old_y

INIT side_max
INIT down_timer
INIT down_delay
INIT coyote_down_timer
INIT fast_down
INIT intersection
INIT broken_lines
INIT score
INIT tetris
INIT memory
INIT switch

DIM(4) index_queue
FOR f = 0 TO 3
  index_queue(f) = RANDOM(1, 7)
END

DIM(2,2) side_keys
DIM(2) up_key
DIM(2) space_key
DIM(2) shift_key

GOSUB SpawnTetromino

BEGIN GAMELOOP
  
  shift_key(_current) = INPUT("SHIFT")
  IF shift_key(_current) = TRUE
    IF shift_key(_last) = FALSE
      IF switch = 0
	    	switch = 1
	      GOSUB SpawnTetromino
	      switch = 2
	    END
    END
  END
  shift_key(_last) = shift_key(_current)
  
  space_key(_current) = INPUT("SPACE")
  IF space_key(_current) = TRUE
    IF space_key(_last) = FALSE
      fast_down = TRUE
    END
  END
  space_key(_last) = space_key(_current)
  
  IF fast_down = TRUE
    GOTO FastDown
  END
  
  side_keys(0)(_current) = INPUT("LEFT")
  side_keys(1)(_current) = INPUT("RIGHT")
  
  FOR i = 0 TO 1
    IF side_keys(i)(_current) = TRUE
      IF side_keys(i)(_last) <= 0
        IF side_keys(i)(_last) = -1
          side_keys(i)(_last) = side_tick
        ELSE
          side_keys(i)(_last) = side_tick_hold
        END
        IF i = 0 : x -= 1 : ELSE : x += 1 : END
        GOSUB CheckIntersection
        IF intersection = TRUE
          IF i = 0 : x += 1 : ELSE : x -= 1 : END
        END
      END
    ELSE
      side_keys(i)(_last) = -1
    END
    side_keys(i)(_last) -= DELTATIME
    side_max = -1
    IF side_keys(i)(_current)
      side_max = 0
    END
    side_keys(i)(_last) = MAX(side_max, side_keys(i)(_last))
  END
  
  up_key(_current) = INPUT("UP")
  IF up_key(_current) = TRUE
    IF up_key(_last) = FALSE
      rotation += 1
      IF rotation = 4 : rotation = 0 : END
      GOSUB CheckIntersection
      IF intersection = FALSE : GOTO RotationOK : END
      x += 1 : GOSUB CheckIntersection
      IF intersection = FALSE : GOTO RotationOK : END
      x += 1 : GOSUB CheckIntersection
      IF intersection = FALSE : GOTO RotationOK : END
      x -= 3 : GOSUB CheckIntersection
      IF intersection = FALSE : GOTO RotationOK : END
      x -= 1 : GOSUB CheckIntersection
      IF intersection = FALSE : GOTO RotationOK : END
      x += 2
      rotation -= 1
      IF rotation = -1 : rotation = 3 : END
      
      RotationOK:
    END
  END
  up_key(_last) = up_key(_current)
  
  GOTO SkipFastDown
  
  FastDown:
  down_timer = 0
  down_delay = 0
  WHILE fast_down = TRUE
    y += 1
    GOSUB CheckIntersection
    IF intersection = TRUE
      fast_down = FALSE
      y -= 1
      GOSUB Render
      SLEEP 1000 / GetDownSpeed() / down_speed_multiplier
      GOTO Freeze
    END
  END
  
  SkipFastDown:
  IF down_timer > down_delay
    y += 1
    GOSUB CheckIntersection
    IF intersection = TRUE
      y -= 1
      IF coyote_down_timer > coyote_down_time
        Freeze:
        GOSUB FreezeTetromino
        GOSUB BreakLines
        GOSUB SpawnTetromino
        GOSUB CheckIntersection
        IF intersection = TRUE
          GOTO Exit
        END
      ELSE
        IF INPUT("DOWN")
          coyote_down_timer += DELTATIME * _
            down_speed_multiplier
        ELSE
          coyote_down_timer += DELTATIME
        END
      END
    ELSE
      down_timer = 0
    END
  ELSE
    down_timer += DELTATIME
    down_delay = 1000 / GetDownSpeed()
    IF INPUT("DOWN")
      down_delay /= down_speed_multiplier
    END
  END
  
  GOSUB Render
  
END

FreezeTetromino:
switch = 0
coyote_down_timer = 0
FOR i = 0 TO 3
  tile_i = i
  GOSUB UpdateTileInfo
  game_fields(tile_x)(tile_y) = index
END
RETURN

BreakLines:
broken_lines = 0
BreakNextLine:
FOR j = 0 TO game_height - 1
  FOR i = 0 TO game_width - 1
    field_index = game_fields(i)(j)
    IF field_index = 0
      BREAK
    END
  END
  IF field_index = 0
    NEXT
  END
  FOR i = 0 TO game_width - 1
    FOR k = 0 TO j
      SET l = j - k
      IF l = 0
        game_fields(i)(l) = 0
      ELSE
        SET m = l - 1
        game_fields(i)(l) = game_fields(i)(m)
      END
    END
  END
  BREAK
END
IF field_index <> 0
  broken_lines += 1
  GOTO BreakNextLine
END
IF broken_lines > 0
  IF broken_lines = 4
    IF tetris
      broken_lines += 1
    END
    tetris = TRUE
  ELSE
    tetris = FALSE
  END
END
score += broken_lines * broken_lines
RETURN

SpawnTetromino:
IF switch = 1
  IF memory > 0
    SET old_memory = memory
    memory = index_queue(0)
    index_queue(0) = old_memory
    GOTO SpawnTetrominoSkip
  ELSE
    memory = index_queue(0)
  END
END
FOR c = 0 TO 2
  SET cc = c + 1
	index_queue(c) = index_queue(cc)
END
index_queue(3) = RANDOM(1, 7)
SpawnTetrominoSkip:
index = index_queue(0)
rotation = 0
y = 0
x = FLOOR(game_width / 2) - 2
RETURN

UpdateTileInfo:
tile = figures(index)(rotation)(tile_i)
tile_x = x + tile % 4
tile_y = y + FLOOR(tile / 4)
RETURN

CheckIntersection:
intersection = FALSE
FOR i = 0 TO 3
  tile_i = i
  GOSUB UpdateTileInfo
  IF tile_x < 0 OR tile_x >= game_width
    intersection = TRUE
  ELSE
    IF tile_y >= game_height
      intersection = TRUE
    ELSE
      IF game_fields(tile_x)(tile_y) > 0
        intersection = TRUE
      END
    END
  END
END
RETURN

Render:
RESET
COLOR "#161620"
FILL

COLOR "#FFFFFF"
ALIGN LEFT
TEXT WIDTH - block_size * 6 + 8, 8, "Score: " + score

TRANSLATE block_size * 6, 0
FOR i = 0 TO game_width - 1
  FOR j = 0 TO game_height - 1
    field_index = game_fields(i)(j)
    field = fields(field_index)
    COLOR field(_color)
    FILL i * block_size + padding / 2, _
         j * block_size + padding / 2, _
         block_size - padding, _
         block_size - padding
  END
END

old_y = y

intersection = FALSE
WHILE intersection = FALSE
  y += 1
  FOR i = 0 TO 3
    tile_i = i
    GOSUB CheckIntersection
    IF intersection = TRUE
      y -= 1
      BREAK
    END
  END
END
IF intersection = TRUE
  FOR i = 0 TO 3
    tile_i = i
    GOSUB UpdateTileInfo
      
    COLOR 155, 255, 255, 55
    GOSUB DrawTetrominoTile
    
    COLOR fields(0)(_color)
    FILL tile_x * block_size + padding / 2 + 2, _
         tile_y * block_size + padding / 2 + 2, _
         block_size - padding - 4, _
         block_size - padding - 4
  END
END

y = old_y

old_index = index
old_rotation = rotation
old_x = x
old_y = y

rotation = 0
x = game_width + 1

FOR a = 1 TO 3
  index = index_queue(a)
	y = (a - 1) * 5 + 2
	COLOR fields(index)(_color)
	FOR b = 0 TO 3
	  tile_i = b
	  GOSUB UpdateTileInfo
	  GOSUB DrawTetrominoTile
	END
END

IF memory > 0
	index = memory
	x = -5
	y = 1
	COLOR fields(index)(_color)
	FOR b = 0 TO 3
	  tile_i = b
	  GOSUB UpdateTileInfo
	  GOSUB DrawTetrominoTile
	END
END

index = old_index
rotation = old_rotation
x = old_x
y = old_y

COLOR fields(index)(_color)
DrawTetromino:
FOR i = 0 TO 3
  tile_i = i
  GOSUB UpdateTileInfo
  GOSUB DrawTetrominoTile
END

RETURN

DrawTetrominoTile:
FILL tile_x * block_size + padding / 2, _
     tile_y * block_size + padding / 2, _
     block_size - padding, _
     block_size - padding
RETURN

Exit:
COLOR "#F006"
GOSUB DrawTetromino